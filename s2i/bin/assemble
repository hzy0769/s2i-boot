#!/bin/bash

# functions begin: common shell routines for s2i scripts

# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
      <id>mirror.default</id>\
      <url>$MAVEN_MIRROR_URL</url>\
      <mirrorOf>external:*</mirrorOf>\
    </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}


function copy_artifacts() {
  dir=$1
  types=
  shift
  while [ $# -gt 0 ]; do
    types="$types;$1"
    shift
  done

  for d in $(echo $dir | tr "," "\n")
  do
    shift
    for t in $(echo $types | tr ";" "\n")
    do
      echo "Copying all $t artifacts from $LOCAL_SOURCE_DIR/$d directory into $DEPLOY_DIR for later deployment..."
      cp -rfv $LOCAL_SOURCE_DIR/$d/*.$t $DEPLOY_DIR 2> /dev/null
    done
  done
}

# handle incremental builds. If we have been passed build artifacts, untar
# them over the supplied source.
manage_incremental_build() {
    if [ -d /tmp/artifacts ]; then
        echo "Expanding artifacts from incremental build..."
        ( cd /tmp/artifacts && tar cf - . ) | ( cd ${HOME} && tar xvf - )
        rm -rf /tmp/artifacts
    fi
}

# s2i 'save-artifacts' routine
#s2i_save_build_artifacts() {
#    cd ${HOME}
#    tar cf - .m2
#}

# optionally clear the local maven repository after the build
clear_maven_repository() {
    mcr=$(echo "${MAVEN_CLEAR_REPO}" | tr [:upper:] [:lower:])
    if [ "${mcr}" = "true" ]; then
        rm -rf ${HOME}/.m2/repository/*
    fi
}

# functions end


HOME=/opt/app-root/src

# we will move any code provided by s2i to here
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR
# TODO: Verify a $HOME is set

# Resulting artifact files will be deployed to /opt/openshift
DEPLOY_DIR=/opt/openshift

# Copy the source for compilation
# TODO: Remove. Why do we need to move the source???
if compgen -G "/tmp/src/*" >/dev/null; then
  mkdir -p $LOCAL_SOURCE_DIR
  cp -ad /tmp/src/* $LOCAL_SOURCE_DIR
fi


if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ] && [ "$ENABLE_NEST_SETTINGS" = "true" ] ; then
    echo "Using setting.xml of the project"
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
   else
    echo "Using default setting.xml"
  fi

  # We move the rest of the configuration, if provided to the place where the app will run
  cp -v $LOCAL_SOURCE_DIR/configuration/* $DEPLOY_DIR
fi

configure_mirrors

manage_incremental_build

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
  # artifacts (*.war, *.jar)
  ARTIFACT_DIR=${ARTIFACT_DIR:-target}

  pushd $LOCAL_SOURCE_DIR &> /dev/null

  MAVEN_ARGS=${MAVEN_ARGS--e -DskipTests package}

  # Always force IPv4 (CLOUD-188)
  # Append user-supplied arguments (CLOUD-412)
  MAVEN_ARGS="$MAVEN_ARGS -Djava.net.preferIPv4Stack=true ${MAVEN_ARGS_APPEND}"

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  echo "Using $(mvn --version)"

  # Execute the actual build
  if [ -n "$ENABLE_RELEASE" ] ; then
    # Release version, Will ignore the test
    echo "Using mvn -DskipTests deploy"
    mvn -DskipTests deploy
  else
    echo "Using mvn $MAVEN_ARGS"
    mvn $MAVEN_ARGS;
  fi

  # Release version, Will ignore the sonar
  if [ -z "$ENABLE_RELEASE" ] && [ -n "$ENABLE_SONAR_PATH" ] && [ "$ENABLE_NEST_SETTINGS" = "true" ] ; then
    mvn -f $ENABLE_SONAR_PATH sonar:sonar
  fi

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory (or $ARTIFACT_DIR if specified)
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts "$ARTIFACT_DIR" jar

  # optionally clear the local maven repository after the build
  clear_maven_repository
  #清理所有源码
  rm -rf /opt/app-root/src/.m2
  rm -rf /opt/app-root/src/source

  popd &> /dev/null
else
  # For binary builds
  # the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
  # artifacts (*.war, *.jar)
  ARTIFACT_DIR=${ARTIFACT_DIR:-.}

  copy_artifacts "$ARTIFACT_DIR" jar
fi

# As Microservices you should only have 1 fat jar
# if compgen -G "/tmp/src/*" >/dev/null; then
# TODO: Review how best move these
RUN_JAR_COUNT=$(ls ${DEPLOY_DIR}/*${APP_SUFFIX}.jar | wc -l)

if [ ${RUN_JAR_COUNT} -eq 1 ]; then
  echo "[INFO] Boot-JAR=${DEPLOY_DIR}/${APP_SUFFIX}.jar"
 # echo "[INFO] Copying ${DEPLOY_DIR}/*${APP_SUFFIX}.jar into ${DEPLOY_DIR}/app.jar"
 # cp ${DEPLOY_DIR}/*${APP_SUFFIX}.jar ${DEPLOY_DIR}/app.jar
 # [ ! -f ${DEPLOY_DIR}/app.jar ] && echo "Application could not be properly built." && exit 1
 # echo "[INFO] Application jar file is located in ${DEPLOY_DIR}/app.jar"
elif [ ${RUN_JAR_COUNT} -eq 0 ]; then
 echo "[ERROR] No app.jar file located in ${DEPLOY_DIR}, APP_SUFFIX is ${APP_SUFFIX}"
 exit 1
else
  echo "[ERROR] Found multiple jar files. APP_SUFFIX is ${APP_SUFFIX}"
  exit 1
fi

exit 0